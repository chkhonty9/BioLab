package org.cn.userservice.dao;

import org.assertj.core.api.Assertions;
import org.cn.userservice.configuration.RSAConfig;
import org.cn.userservice.configuration.SecurityConfig;
import org.cn.userservice.entity.Admin;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.ActiveProfiles;

@DataJpaTest
@ActiveProfiles("test")
class AdminRepositoryTest {

    @MockBean
    private SecurityConfig securityConfig;

    @MockBean
    private RSAConfig rsaConfig;

    @Autowired
    private AdminRepository adminRepository;

    private Admin admin;

    @BeforeEach
    public void setUp() {
        admin = new Admin();
        admin.setId(1L);
        admin.setFirstName("Admin");
        admin.setLastName("Admin");
        admin.setEmail("admin@gmail.com");
        admin.setPassword("admin");
        admin.setRole("ADMIN");
        admin.setLabel("label");
    }

    @Test
    public void saveAdminSuccessfully() {
        Admin savedAdmin = adminRepository.save(admin);

        // Verify that the saved admin is not null
        Assertions.assertThat(savedAdmin).isNotNull();

        // Verify that the saved admin's fields match the input admin object
        Assertions.assertThat(savedAdmin)
                .usingRecursiveComparison()
                .ignoringFields("id") // Ignore the ID field as it is generated by the database
                .isEqualTo(admin);
    }

    @Test
    public void testFindById() {
        Admin savedAdmin = adminRepository.save(admin);

        // Find the admin by ID
        Admin foundAdmin = adminRepository.findById(savedAdmin.getId()).orElse(null);

        // Verify that the found admin is not null
        Assertions.assertThat(foundAdmin).isNotNull();

        // Verify that the found admin's fields match the saved admin
        Assertions.assertThat(foundAdmin)
                .usingRecursiveComparison()
                .ignoringFields("id") // Ignore the ID field as it is generated by the database
                .isEqualTo(admin);
    }
}
